// Code generated by protoc-gen-go. DO NOT EDIT.
// source: steampipe.proto

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	steampipe.proto

It has these top-level messages:
	Address
	Response
*/
package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Address struct {
	Addr string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Address) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type Response struct {
	Name        string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Map         string `protobuf:"bytes,2,opt,name=map" json:"map,omitempty"`
	Game        string `protobuf:"bytes,3,opt,name=game" json:"game,omitempty"`
	Players     int32  `protobuf:"varint,4,opt,name=players" json:"players,omitempty"`
	MaxPlayers  int32  `protobuf:"varint,5,opt,name=max_players,json=maxPlayers" json:"max_players,omitempty"`
	Bots        int32  `protobuf:"varint,6,opt,name=bots" json:"bots,omitempty"`
	Server_Type int32  `protobuf:"varint,7,opt,name=server_Type,json=serverType" json:"server_Type,omitempty"`
	Secured     bool   `protobuf:"varint,8,opt,name=secured" json:"secured,omitempty"`
	Error       string `protobuf:"bytes,9,opt,name=error" json:"error,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Response) GetMap() string {
	if m != nil {
		return m.Map
	}
	return ""
}

func (m *Response) GetGame() string {
	if m != nil {
		return m.Game
	}
	return ""
}

func (m *Response) GetPlayers() int32 {
	if m != nil {
		return m.Players
	}
	return 0
}

func (m *Response) GetMaxPlayers() int32 {
	if m != nil {
		return m.MaxPlayers
	}
	return 0
}

func (m *Response) GetBots() int32 {
	if m != nil {
		return m.Bots
	}
	return 0
}

func (m *Response) GetServer_Type() int32 {
	if m != nil {
		return m.Server_Type
	}
	return 0
}

func (m *Response) GetSecured() bool {
	if m != nil {
		return m.Secured
	}
	return false
}

func (m *Response) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*Address)(nil), "main.Address")
	proto.RegisterType((*Response)(nil), "main.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SteamPipe service

type SteamPipeClient interface {
	Query(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Response, error)
}

type steamPipeClient struct {
	cc *grpc.ClientConn
}

func NewSteamPipeClient(cc *grpc.ClientConn) SteamPipeClient {
	return &steamPipeClient{cc}
}

func (c *steamPipeClient) Query(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/main.SteamPipe/Query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SteamPipe service

type SteamPipeServer interface {
	Query(context.Context, *Address) (*Response, error)
}

func RegisterSteamPipeServer(s *grpc.Server, srv SteamPipeServer) {
	s.RegisterService(&_SteamPipe_serviceDesc, srv)
}

func _SteamPipe_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamPipeServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.SteamPipe/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamPipeServer).Query(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

var _SteamPipe_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.SteamPipe",
	HandlerType: (*SteamPipeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _SteamPipe_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steampipe.proto",
}

func init() { proto.RegisterFile("steampipe.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 247 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x34, 0x90, 0xcd, 0x4a, 0xc4, 0x30,
	0x10, 0xc7, 0xad, 0xdb, 0x6e, 0xdb, 0x11, 0x3f, 0x18, 0x3c, 0x04, 0x41, 0x2c, 0x3d, 0xf5, 0xd4,
	0x83, 0xe2, 0x03, 0xf8, 0x06, 0x6b, 0xf5, 0xbe, 0x64, 0xed, 0x20, 0x05, 0xd3, 0x84, 0x49, 0x57,
	0xb6, 0xef, 0xeb, 0x83, 0xc8, 0x24, 0x9b, 0xdb, 0xff, 0xe3, 0x37, 0x24, 0xfc, 0xe1, 0xd6, 0x2f,
	0xa4, 0x8d, 0x9b, 0x1c, 0xf5, 0x8e, 0xed, 0x62, 0x31, 0x37, 0x7a, 0x9a, 0xdb, 0x47, 0x28, 0xdf,
	0xc6, 0x91, 0xc9, 0x7b, 0x44, 0xc8, 0xf5, 0x38, 0xb2, 0xca, 0x9a, 0xac, 0xab, 0x87, 0xa0, 0xdb,
	0xbf, 0x0c, 0xaa, 0x81, 0xbc, 0xb3, 0xb3, 0x27, 0x01, 0x66, 0x6d, 0x28, 0x01, 0xa2, 0xf1, 0x0e,
	0x36, 0x46, 0x3b, 0x75, 0x19, 0x22, 0x91, 0x42, 0x7d, 0x0b, 0xb5, 0x89, 0x94, 0x68, 0x54, 0x50,
	0xba, 0x1f, 0xbd, 0x12, 0x7b, 0x95, 0x37, 0x59, 0x57, 0x0c, 0xc9, 0xe2, 0x13, 0x5c, 0x19, 0x7d,
	0xda, 0xa7, 0xb6, 0x08, 0x2d, 0x18, 0x7d, 0xda, 0x9d, 0x01, 0x84, 0xfc, 0x60, 0x17, 0xaf, 0xb6,
	0xa1, 0x09, 0x5a, 0x8e, 0x3c, 0xf1, 0x2f, 0xf1, 0xfe, 0x73, 0x75, 0xa4, 0xca, 0x78, 0x14, 0x23,
	0x49, 0xe4, 0x3d, 0x4f, 0x5f, 0x47, 0xa6, 0x51, 0x55, 0x4d, 0xd6, 0x55, 0x43, 0xb2, 0x78, 0x0f,
	0x05, 0x31, 0x5b, 0x56, 0x75, 0xf8, 0x5e, 0x34, 0xcf, 0xaf, 0x50, 0x7f, 0xc8, 0x3c, 0xbb, 0xc9,
	0x11, 0x76, 0x50, 0xbc, 0x1f, 0x89, 0x57, 0xbc, 0xee, 0x65, 0xa2, 0xfe, 0xbc, 0xcf, 0xc3, 0x4d,
	0xb4, 0x69, 0x8e, 0xf6, 0xe2, 0xb0, 0x0d, 0x4b, 0xbe, 0xfc, 0x07, 0x00, 0x00, 0xff, 0xff, 0x67,
	0xa9, 0xbb, 0x07, 0x5c, 0x01, 0x00, 0x00,
}
